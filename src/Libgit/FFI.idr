module Libgit.FFI

import Prelude
import System.FFI

-- FFI string builders

public export
libgit : String -> String
libgit fn = "C:" ++ fn ++ ",libgit2"

public export
libgitWrapper : String -> String
libgitWrapper fn = "C:" ++ fn ++ ",libgit_idris_wrapper"

-- System info helpers
---- These should be generated by the build system until type providers exist

CUInt : Type
CUInt = Bits32

CSizeT : Type
CSizeT = Bits32

-- FFI functions

export
%foreign (libgitWrapper "make_string")
make_string : String -> Ptr String

export
%foreign (libgitWrapper "is_null_string")
is_null_string : Ptr String -> Int

export
%foreign (libgitWrapper "get_string")
getString : Ptr String -> String

export
%foreign (libgitWrapper "null_string")
null_string : Ptr String

export
%foreign (libgitWrapper "clone_options_branch")
clone_options_branch : AnyPtr -> String

export
%foreign (libgitWrapper "apply_clone_options")
prim_apply_clone_options : AnyPtr -> String -> Int -> PrimIO ()

export
%foreign (libgit "git_libgit2_init")
prim_libgit_init : PrimIO Int

export
%foreign (libgit "git_libgit2_shutdown")
prim_libgit_shutdown : PrimIO Int

export
%foreign (libgitWrapper "make_clone_options")
prim_init_clone_options : PrimIO AnyPtr

export
%foreign (libgitWrapper "git_clone_options_version")
git_clone_options_version : Int

export
%foreign (libgit "git_clone_init_options")
prim_git_clone_init_options : AnyPtr -> Int -> PrimIO Int

export
%foreign (libgitWrapper "make_git_repository")
prim_mk_null_git_repository : PrimIO (Ptr AnyPtr)

export
%foreign (libgit "git_clone")
prim_clone : (Ptr AnyPtr) -> String -> String -> AnyPtr -> PrimIO Int

export
%foreign (libgit "git_repository_open")
prim_git_repository_open : (Ptr AnyPtr) -> String -> PrimIO Int

export
%foreign (libgitWrapper "get_git_repository")
get_git_repository : (Ptr AnyPtr) -> AnyPtr

export
liftPIO : (HasIO m) => PrimIO a -> m a
liftPIO action = liftIO $ primIO action

export
cBool : Bool -> Int
cBool True = 1
cBool False = 0
