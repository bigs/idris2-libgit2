module Libgit.FFI

import Prelude
import System.FFI

import Libgit.Types

-- FFI string builders

public export
libgit : String -> String
libgit fn = "C:" ++ fn ++ ",libgit2"

public export
libgitWrapper : String -> String
libgitWrapper fn = "C:" ++ fn ++ ",libgit_idris_wrapper"

-- Structs

export
CGitResult : Type
CGitResult = Struct "git_result" [
  ("obj", AnyPtr),
  ("result", Int)
]

%foreign "C:free,libc"
prim_free : AnyPtr -> PrimIO ()

%foreign (libgitWrapper "identity")
derefResult : Ptr CGitResult -> CGitResult

Finalizer : Type
Finalizer = AnyPtr -> PrimIO ()

export
managePtrWithFinalizer : Finalizer -> String -> AnyPtr -> IO GCAnyPtr
-- managePtrWithFinalizer finalizer ptr = onCollectAny ptr (primIO . finalizer)
managePtrWithFinalizer finalizer name ptr = onCollectAny ptr $ \ptr => do
  putStrLn $ "freeing " ++ name
  primIO . finalizer $ ptr

export
managePtr : String -> AnyPtr -> IO GCAnyPtr
managePtr = managePtrWithFinalizer prim_free

export
gitResultWithFinalizer : Finalizer
                      -> String
                      -> Ptr CGitResult
                      -> IO (GitResult GCAnyPtr)
gitResultWithFinalizer finalizer name ptr = do
  let cgr : CGitResult = derefResult ptr
      anyPtr : AnyPtr = prim__forgetPtr ptr
      result : Int = getField cgr "result"
  gresult <- case result of
                0 => let ptr : AnyPtr = getField cgr "obj" in
                        Right <$> managePtrWithFinalizer finalizer name ptr
                res => pure (Left res)
  liftIO (primIO (prim_free anyPtr))
  pure gresult

export
gitResult : String -> Ptr CGitResult -> IO (GitResult GCAnyPtr)
gitResult = gitResultWithFinalizer prim_free

-- System info helpers
---- These should be generated by the build system until type providers exist

CUInt : Type
CUInt = Bits32

CSizeT : Type
CSizeT = Bits32

-- FFI functions

export
%foreign (libgitWrapper "make_string")
make_string : String -> Ptr String

export
%foreign (libgitWrapper "is_null_string")
is_null_string : Ptr String -> Int

export
%foreign (libgitWrapper "get_string")
getString : Ptr String -> String

export
%foreign (libgitWrapper "null_string")
null_string : Ptr String

export
%foreign (libgitWrapper "apply_clone_options")
prim_apply_clone_options : GCAnyPtr -> String -> Int -> PrimIO ()

export
%foreign (libgit "git_libgit2_init")
prim_libgit_init : PrimIO Int

export
%foreign (libgit "git_libgit2_shutdown")
prim_libgit_shutdown : PrimIO Int

export
%foreign (libgitWrapper "make_clone_options")
prim_init_clone_options : PrimIO AnyPtr

export
%foreign (libgitWrapper "git_clone_options_version")
git_clone_options_version : Int

export
%foreign (libgit "git_clone_init_options")
prim_git_clone_init_options : GCAnyPtr -> Int -> PrimIO Int

export
%foreign (libgitWrapper "git_clone_repository")
prim_git_clone_repository :  String -> String -> GCAnyPtr -> PrimIO (Ptr CGitResult)

export
%foreign (libgit "git_repository_free")
prim_git_repository_free : Finalizer

export
%foreign (libgitWrapper "git_open_repository")
prim_git_open_repository : String -> PrimIO (Ptr CGitResult)

export
%foreign (libgitWrapper "git_oid_from_string")
git_oid_from_string : String -> Ptr CGitResult

export
%foreign (libgitWrapper "git_oid_to_string")
git_oid_to_string : GCAnyPtr -> String

export
liftPIO : (HasIO m) => PrimIO a -> m a
liftPIO action = liftIO (primIO action)

export
cBool : Bool -> Int
cBool True = 1
cBool False = 0
